# FindLinker.cmake
# Unified accelerated linker configuration (lld / mold) without legacy wrappers.
# Public functions:
#   linker_configure()
#   linker_add_selfcheck()
# Exported (CACHE/INTERNAL) vars: HALO_LINKER_KIND, HALO_LINKER_EXECUTABLE,
#   HALO_LLD_ENABLED, HALO_MOLD_ENABLED, HALO_LLD_LINKER_FLAG, HALO_MOLD_LINKER_FLAG.

include_guard(GLOBAL)

function(_findlinker_try_flag _lang _flag _result_var)
    include(CheckLinkerFlag)
    check_linker_flag(${_lang} "${_flag}" ${_result_var})
endfunction()

function(linker_configure)
    # Initialize / reset state each configure (idempotent)
    set(HALO_LLD_ENABLED FALSE CACHE INTERNAL "lld acceleration enabled")
    set(HALO_MOLD_ENABLED FALSE CACHE INTERNAL "mold acceleration enabled")
    set(HALO_LLD_LINKER_FLAG "" CACHE INTERNAL "lld driver flag")
    set(HALO_MOLD_LINKER_FLAG "" CACHE INTERNAL "mold driver flag")
    set(HALO_LINKER_KIND "none" CACHE INTERNAL "Selected accelerated linker kind")
    set(HALO_LINKER_EXECUTABLE "" CACHE FILEPATH "Selected accelerated linker executable")

    option(HALO_DISABLE_LLD "Disable automatic lld usage" OFF)
    option(HALO_DISABLE_MOLD "Disable automatic mold usage" OFF)
    set(HALO_LLD_EXECUTABLE "${HALO_LLD_EXECUTABLE}" CACHE FILEPATH "Explicit lld executable override")
    set(HALO_MOLD_EXECUTABLE "${HALO_MOLD_EXECUTABLE}" CACHE FILEPATH "Explicit mold executable override")
    set(HALO_FORCE_LINKER "${HALO_FORCE_LINKER}" CACHE STRING "Force linker preference (mold|lld)")
    set_property(CACHE HALO_FORCE_LINKER PROPERTY STRINGS mold lld "")

    set(_found FALSE)
    set(_fuse_status n/a)
    set(_status system-linker)

    if(APPLE OR UNIX)
        # Build priority list
        set(_priority)
        if(HALO_FORCE_LINKER STREQUAL "mold")
            list(APPEND _priority mold lld)
        elseif(HALO_FORCE_LINKER STREQUAL "lld")
            list(APPEND _priority lld mold)
        else()
            if(APPLE)
                list(APPEND _priority lld)
            else()
                list(APPEND _priority mold lld)
            endif()
        endif()

        foreach(_kind IN LISTS _priority)
            if(_found)
                break()
            endif()
            if(_kind STREQUAL "mold")
                if(APPLE OR HALO_DISABLE_MOLD)
                    continue()
                endif()
                set(_cand "")
                if(HALO_MOLD_EXECUTABLE AND EXISTS "${HALO_MOLD_EXECUTABLE}")
                    set(_cand "${HALO_MOLD_EXECUTABLE}")
                else()
                    find_program(_cand NAMES mold
                        HINTS /usr/bin /usr/local/bin /opt/homebrew/bin /opt/homebrew/opt/mold/bin)
                endif()
                if(_cand)
                    set(CMAKE_LINKER "${_cand}" CACHE FILEPATH "Selected linker executable" FORCE)
                    _findlinker_try_flag(CXX "-fuse-ld=mold" HAS_FUSE_MOLD)
                    if(HAS_FUSE_MOLD)
                        add_link_options(-fuse-ld=mold)
                        set(HALO_MOLD_LINKER_FLAG "-fuse-ld=mold" CACHE INTERNAL "mold driver flag" FORCE)
                        set(_fuse_status on)
                    else()
                        set(_fuse_status unsupported)
                    endif()
                    set(HALO_MOLD_ENABLED TRUE CACHE INTERNAL "mold acceleration enabled" FORCE)
                    set(HALO_LINKER_KIND mold CACHE INTERNAL "Selected accelerated linker kind" FORCE)
                    set(HALO_LINKER_EXECUTABLE "${_cand}" CACHE FILEPATH "Selected accelerated linker executable" FORCE)
                    set(_status enabled-mold)
                    set(_found TRUE)
                endif()
            elseif(_kind STREQUAL "lld")
                if(HALO_DISABLE_LLD)
                    continue()
                endif()
                set(_cand "")
                if(HALO_LLD_EXECUTABLE AND EXISTS "${HALO_LLD_EXECUTABLE}")
                    set(_cand "${HALO_LLD_EXECUTABLE}")
                else()
                    find_program(_cand NAMES ld.lld lld
                        HINTS /opt/homebrew/opt/llvm/bin /opt/homebrew/bin /usr/local/opt/llvm/bin /usr/local/bin /usr/bin)
                endif()
                if(_cand)
                    set(CMAKE_LINKER "${_cand}" CACHE FILEPATH "Selected linker executable" FORCE)
                    _findlinker_try_flag(CXX "-fuse-ld=lld" HAS_FUSE_LLD)
                    if(HAS_FUSE_LLD)
                        add_link_options(-fuse-ld=lld)
                        set(HALO_LLD_LINKER_FLAG "-fuse-ld=lld" CACHE INTERNAL "lld driver flag" FORCE)
                        set(_fuse_status on)
                    else()
                        set(_fuse_status unsupported)
                    endif()
                    set(HALO_LLD_ENABLED TRUE CACHE INTERNAL "lld acceleration enabled" FORCE)
                    set(HALO_LINKER_KIND lld CACHE INTERNAL "Selected accelerated linker kind" FORCE)
                    set(HALO_LINKER_EXECUTABLE "${_cand}" CACHE FILEPATH "Selected accelerated linker executable" FORCE)
                    set(_status enabled-lld)
                    set(_found TRUE)
                endif()
            endif()
        endforeach()
    endif()

    message(STATUS "linker: kind=${HALO_LINKER_KIND}; exec='${HALO_LINKER_EXECUTABLE}'; fuse-flag=${_fuse_status}; status=${_status}")
endfunction()

function(linker_add_selfcheck)
    if(NOT CMAKE_CXX_COMPILER)
        message(WARNING "linker_add_selfcheck called before CXX compiler enabled")
        return()
    endif()
    if(TARGET linker-selfcheck)
        return()
    endif()
    file(WRITE ${CMAKE_BINARY_DIR}/linker_probe.cpp "int main(){return 0;}")
    add_custom_target(linker-selfcheck
        COMMAND ${CMAKE_CXX_COMPILER} ${CMAKE_CXX_FLAGS} -c ${CMAKE_BINARY_DIR}/linker_probe.cpp -o ${CMAKE_BINARY_DIR}/linker_probe.o
        COMMAND ${CMAKE_CXX_COMPILER} ${CMAKE_CXX_FLAGS} ${CMAKE_BINARY_DIR}/linker_probe.o -o ${CMAKE_BINARY_DIR}/linker_probe $<$<BOOL:${HALO_LLD_LINKER_FLAG}>:${HALO_LLD_LINKER_FLAG}> $<$<BOOL:${HALO_MOLD_LINKER_FLAG}>:${HALO_MOLD_LINKER_FLAG}> -Wl,-v
        COMMENT "[linker] Display linker invocation (-Wl,-v)"
        VERBATIM)
endfunction()
