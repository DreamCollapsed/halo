# Fizz third-party integration
# Reference: https://github.com/facebookincubator/fizz

# Fizz depends on folly, OpenSSL, libsodium, jemalloc, and zlib (directly used via ZLIB::ZLIB)
thirdparty_check_dependencies("folly;openssl;libsodium;jemalloc;zlib")

# Set up directories
set(FIZZ_NAME "fizz")
set(FIZZ_DOWNLOAD_FILE "${THIRDPARTY_DOWNLOAD_DIR}/fizz-v${FIZZ_VERSION}.zip")
set(FIZZ_SOURCE_DIR "${THIRDPARTY_SRC_DIR}/${FIZZ_NAME}")
set(FIZZ_BUILD_DIR "${THIRDPARTY_BUILD_DIR}/${FIZZ_NAME}")
set(FIZZ_INSTALL_DIR "${THIRDPARTY_INSTALL_DIR}/${FIZZ_NAME}")

get_filename_component(FIZZ_INSTALL_DIR "${FIZZ_INSTALL_DIR}" ABSOLUTE)

# Download and extract fizz
thirdparty_download_and_check("${FIZZ_URL}" "${FIZZ_DOWNLOAD_FILE}" "${FIZZ_SHA256}")

# Extract fizz manually since thirdparty_extract_and_rename has issues with .zip files
if(NOT EXISTS "${FIZZ_SOURCE_DIR}/CMakeLists.txt")
    # Clean up any existing fizz source directory
    if(EXISTS "${FIZZ_SOURCE_DIR}")
        file(REMOVE_RECURSE "${FIZZ_SOURCE_DIR}")
    endif()
    
    # Create a temporary directory for extraction
    set(_temp_extract_dir "${THIRDPARTY_SRC_DIR}/fizz_temp_extract")
    if(EXISTS "${_temp_extract_dir}")
        file(REMOVE_RECURSE "${_temp_extract_dir}")
    endif()
    file(MAKE_DIRECTORY "${_temp_extract_dir}")
    
    # Extract using cmake -E tar to temporary directory
    execute_process(
        COMMAND ${CMAKE_COMMAND} -E tar xf "${FIZZ_DOWNLOAD_FILE}"
        WORKING_DIRECTORY "${_temp_extract_dir}"
        RESULT_VARIABLE _extract_failed
    )
    if(_extract_failed)
        message(FATAL_ERROR "Failed to extract ${FIZZ_DOWNLOAD_FILE}")
    endif()
    
    # Find the extracted fizz directory specifically
    set(_fizz_extracted_dir "${_temp_extract_dir}/fizz")
    if(NOT EXISTS "${_fizz_extracted_dir}")
        # List all extracted contents for debugging
        file(GLOB _extracted_contents "${_temp_extract_dir}/*")
        message(FATAL_ERROR "Fizz directory not found after extraction. Found: ${_extracted_contents}")
    endif()
    
    if(NOT IS_DIRECTORY "${_fizz_extracted_dir}")
        message(FATAL_ERROR "Extracted fizz path is not a directory: ${_fizz_extracted_dir}")
    endif()
    
    # Move fizz directory to correct location
    file(RENAME "${_fizz_extracted_dir}" "${FIZZ_SOURCE_DIR}")
    
    # Clean up temporary directory
    file(REMOVE_RECURSE "${_temp_extract_dir}")
    
    # Verify CMakeLists.txt exists
    if(NOT EXISTS "${FIZZ_SOURCE_DIR}/CMakeLists.txt")
        message(FATAL_ERROR "CMakeLists.txt not found in extracted fizz directory: ${FIZZ_SOURCE_DIR}")
    endif()
    
    # Apply patches for open-source build compatibility
    message(STATUS "Applying Facebook build system compatibility patches to fizz")
    
    # Replace Facebook-specific FBBuildOptions with standard CMake
    file(READ "${FIZZ_SOURCE_DIR}/CMakeLists.txt" _fizz_cmake_content)
    
    # Comment out Facebook-specific includes and functions
    string(REPLACE "include(FBBuildOptions)" "# include(FBBuildOptions) # Disabled for open-source build" _fizz_cmake_content "${_fizz_cmake_content}")
    string(REPLACE "fb_activate_static_library_option()" "# fb_activate_static_library_option() # Disabled for open-source build" _fizz_cmake_content "${_fizz_cmake_content}")
    
    # Write the modified content back
    file(WRITE "${FIZZ_SOURCE_DIR}/CMakeLists.txt" "${_fizz_cmake_content}")
    
    message(STATUS "Successfully applied Facebook build system patches to fizz")
endif()

# Create CMake modules for fizz build (FindSodium.cmake and FindBoost.cmake)
set(_fizz_cmake_modules "${FIZZ_BUILD_DIR}/cmake_modules")
file(MAKE_DIRECTORY "${_fizz_cmake_modules}")

# Create FindSodium.cmake module
file(WRITE "${_fizz_cmake_modules}/FindSodium.cmake" "
# FindSodium.cmake - Find libsodium library and headers
# This file is generated by halo/thirdparty/cmake/fizz.cmake

set(sodium_USE_STATIC_LIBS ON)
set(sodium_INCLUDE_DIR \"${THIRDPARTY_INSTALL_DIR}/libsodium/include\")
set(sodium_LIBRARY \"${THIRDPARTY_INSTALL_DIR}/libsodium/lib/libsodium.a\")

# Verify files exist
if(EXISTS \"\${sodium_INCLUDE_DIR}/sodium.h\" AND EXISTS \"\${sodium_LIBRARY}\")
    set(Sodium_FOUND TRUE)
    set(sodium_LIBRARIES \"\${sodium_LIBRARY}\")
    set(sodium_INCLUDE_DIRS \"\${sodium_INCLUDE_DIR}\")
    
    # Create imported target
    if(NOT TARGET sodium)
        add_library(sodium STATIC IMPORTED)
        set_target_properties(sodium PROPERTIES
            IMPORTED_LOCATION \"\${sodium_LIBRARY}\"
            INTERFACE_INCLUDE_DIRECTORIES \"\${sodium_INCLUDE_DIR}\"
        )
    endif()
else()
    set(Sodium_FOUND FALSE)
endif()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(Sodium
    REQUIRED_VARS sodium_LIBRARY sodium_INCLUDE_DIR
)
")

# Create FindBoost.cmake module for fizz compatibility
file(WRITE "${_fizz_cmake_modules}/FindBoost.cmake" "
# FindBoost.cmake - Find Boost library for fizz
# This file is generated by halo/thirdparty/cmake/fizz.cmake
# Redirects to our installed Boost config

set(Boost_ROOT \"${THIRDPARTY_INSTALL_DIR}/boost\")
set(Boost_DIR \"${THIRDPARTY_INSTALL_DIR}/boost/lib/cmake/Boost-1.88.0\")

# Set proper static runtime configuration to match our build
set(Boost_USE_STATIC_RUNTIME ON)
set(Boost_USE_STATIC_LIBS ON)
set(Boost_USE_MULTITHREADED ON)

# Find the actual Boost config
find_package(Boost CONFIG REQUIRED)

# Set legacy variables for compatibility
set(Boost_FOUND TRUE)
set(Boost_INCLUDE_DIRS \"\${Boost_INCLUDE_DIRS}\")
set(Boost_LIBRARIES \"\${Boost_LIBRARIES}\")

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(Boost
    REQUIRED_VARS Boost_ROOT
)
")

# Get optimization flags and configure CMAKE arguments using ThirdpartyUtils standard approach
thirdparty_get_optimization_flags(_opt_flags COMPONENT fizz)
# Add only fizz-specific overrides that are not handled by ThirdpartyUtils.cmake
list(APPEND _opt_flags
    -DCMAKE_INSTALL_PREFIX=${FIZZ_INSTALL_DIR}
    
    # Boost configuration
    -DBoost_DIR=${THIRDPARTY_INSTALL_DIR}/boost/lib/cmake/Boost-1.88.0
    
    # Glog configuration - fizz requires glog package
    -DGlog_DIR=${THIRDPARTY_INSTALL_DIR}/glog/lib/cmake/glog
    
    # ZLIB configuration (fizz directly uses ZLIB::ZLIB)
    -DZLIB_ROOT=${THIRDPARTY_INSTALL_DIR}/zlib
    -DZLIB_INCLUDE_DIR=${THIRDPARTY_INSTALL_DIR}/zlib/include
    -DZLIB_LIBRARY=${THIRDPARTY_INSTALL_DIR}/zlib/lib/libz.a
    
    # Point to our FindSodium.cmake
    -DCMAKE_MODULE_PATH=${_fizz_cmake_modules}
    
    # Jemalloc include path
    -DCMAKE_CXX_FLAGS=-I${THIRDPARTY_INSTALL_DIR}/jemalloc/include
    -DCMAKE_C_FLAGS=-I${THIRDPARTY_INSTALL_DIR}/jemalloc/include
    
    # Disable building tests and examples
    -DBUILD_TESTS=OFF
    -DBUILD_EXAMPLES=OFF
)

# Configure fizz with CMake using standard ThirdpartyUtils approach
thirdparty_cmake_configure("${FIZZ_SOURCE_DIR}" "${FIZZ_BUILD_DIR}"
    FORCE_CONFIGURE
    VALIDATION_FILES
        "${FIZZ_BUILD_DIR}/CMakeCache.txt"
        "${FIZZ_BUILD_DIR}/build.ninja"
    CMAKE_ARGS
        ${_opt_flags}
)

# Build and install fizz
thirdparty_cmake_install("${FIZZ_BUILD_DIR}" "${FIZZ_INSTALL_DIR}"
    VALIDATION_FILES
        "${FIZZ_INSTALL_DIR}/lib/libfizz.a"
        "${FIZZ_INSTALL_DIR}/include/fizz/fizz-config.h"
)

# Export Fizz configuration for parent scope
thirdparty_safe_set_parent_scope(FIZZ_INSTALL_DIR "${FIZZ_INSTALL_DIR}")
set(fizz_DIR "${FIZZ_INSTALL_DIR}/lib/cmake/fizz" CACHE PATH "Path to installed Fizz cmake config" FORCE)

# Import Fizz package immediately
if(EXISTS "${FIZZ_INSTALL_DIR}/lib/cmake/fizz/fizz-config.cmake")
    # Patch fizz-config.cmake to disable external dependency searches
    file(READ "${FIZZ_INSTALL_DIR}/lib/cmake/fizz/fizz-config.cmake" config_content)
    
    # Disable dependency searches that are handled by parent
    string(REGEX REPLACE "find_dependency\\([^)]+\\)" "# \\0 - handled by parent" config_content "${config_content}")
    
    # Write the patched config back
    file(WRITE "${FIZZ_INSTALL_DIR}/lib/cmake/fizz/fizz-config.cmake" "${config_content}")
    
    find_package(fizz REQUIRED CONFIG QUIET)
    message(STATUS "Fizz found and imported: ${FIZZ_INSTALL_DIR}")
else()
    message(WARNING "Fizz cmake config not found at ${FIZZ_INSTALL_DIR}")
endif()
