# Fizz third-party integration
# Reference: https://github.com/facebookincubator/fizz

thirdparty_check_dependencies("folly;openssl;libsodium;jemalloc;zlib")

# Set up directories
set(FIZZ_NAME "fizz")
set(FIZZ_DOWNLOAD_FILE "${THIRDPARTY_DOWNLOAD_DIR}/fizz-v${FIZZ_VERSION}.zip")
set(FIZZ_SOURCE_DIR "${THIRDPARTY_SRC_DIR}/${FIZZ_NAME}")
set(FIZZ_BUILD_DIR "${THIRDPARTY_BUILD_DIR}/${FIZZ_NAME}")
set(FIZZ_INSTALL_DIR "${THIRDPARTY_INSTALL_DIR}/${FIZZ_NAME}")

get_filename_component(FIZZ_INSTALL_DIR "${FIZZ_INSTALL_DIR}" ABSOLUTE)

thirdparty_download_and_check("${FIZZ_URL}" "${FIZZ_DOWNLOAD_FILE}" "${FIZZ_SHA256}")

if(NOT EXISTS "${FIZZ_SOURCE_DIR}/CMakeLists.txt")
    if(EXISTS "${FIZZ_SOURCE_DIR}")
        file(REMOVE_RECURSE "${FIZZ_SOURCE_DIR}")
    endif()
    
    set(_temp_extract_dir "${THIRDPARTY_SRC_DIR}/fizz_temp_extract")
    if(EXISTS "${_temp_extract_dir}")
        file(REMOVE_RECURSE "${_temp_extract_dir}")
    endif()
    file(MAKE_DIRECTORY "${_temp_extract_dir}")
    
    execute_process(
        COMMAND ${CMAKE_COMMAND} -E tar xf "${FIZZ_DOWNLOAD_FILE}"
        WORKING_DIRECTORY "${_temp_extract_dir}"
        RESULT_VARIABLE _extract_failed
    )
    if(_extract_failed)
        message(FATAL_ERROR "Failed to extract ${FIZZ_DOWNLOAD_FILE}")
    endif()
    
    set(_fizz_extracted_dir "${_temp_extract_dir}/fizz")
    if(NOT EXISTS "${_fizz_extracted_dir}")
        file(GLOB _extracted_contents "${_temp_extract_dir}/*")
        message(FATAL_ERROR "Fizz directory not found after extraction. Found: ${_extracted_contents}")
    endif()
    
    if(NOT IS_DIRECTORY "${_fizz_extracted_dir}")
        message(FATAL_ERROR "Extracted fizz path is not a directory: ${_fizz_extracted_dir}")
    endif()
    
    file(RENAME "${_fizz_extracted_dir}" "${FIZZ_SOURCE_DIR}")
    
    file(REMOVE_RECURSE "${_temp_extract_dir}")
    
    if(NOT EXISTS "${FIZZ_SOURCE_DIR}/CMakeLists.txt")
        message(FATAL_ERROR "CMakeLists.txt not found in extracted fizz directory: ${FIZZ_SOURCE_DIR}")
    endif()
    
    file(READ "${FIZZ_SOURCE_DIR}/CMakeLists.txt" _fizz_cmake_content)
    
    string(REPLACE "include(FBBuildOptions)" "# include(FBBuildOptions) # Disabled for open-source build" _fizz_cmake_content "${_fizz_cmake_content}")
    string(REPLACE "fb_activate_static_library_option()" "# fb_activate_static_library_option() # Disabled for open-source build" _fizz_cmake_content "${_fizz_cmake_content}")
    
    file(WRITE "${FIZZ_SOURCE_DIR}/CMakeLists.txt" "${_fizz_cmake_content}")
    
    message(STATUS "Successfully applied Facebook build system patches to fizz")
endif()

set(_fizz_cmake_modules "${FIZZ_BUILD_DIR}/cmake_modules")
file(MAKE_DIRECTORY "${_fizz_cmake_modules}")

file(WRITE "${_fizz_cmake_modules}/FindSodium.cmake" "
# FindSodium.cmake - Wrapper around Folly's FindLibsodium.cmake
# This file is generated by halo/thirdparty/cmake/fizz.cmake

# Use our pre-built libsodium
set(LIBSODIUM_INCLUDE_DIR \"${THIRDPARTY_INSTALL_DIR}/libsodium/include\")
set(LIBSODIUM_LIBRARY \"${THIRDPARTY_INSTALL_DIR}/libsodium/lib/libsodium.a\")

# Set Fizz's expected variables
set(Sodium_FOUND TRUE)
set(sodium_LIBRARIES \"\${LIBSODIUM_LIBRARY}\")
set(sodium_INCLUDE_DIRS \"\${LIBSODIUM_INCLUDE_DIR}\")

# Create imported target expected by Fizz
if(NOT TARGET sodium)
    add_library(sodium STATIC IMPORTED)
    set_target_properties(sodium PROPERTIES
        IMPORTED_LOCATION \"\${LIBSODIUM_LIBRARY}\"
        INTERFACE_INCLUDE_DIRECTORIES \"\${LIBSODIUM_INCLUDE_DIR}\"
    )
endif()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(Sodium
    REQUIRED_VARS LIBSODIUM_LIBRARY LIBSODIUM_INCLUDE_DIR
)
")

thirdparty_get_optimization_flags(_opt_flags COMPONENT fizz)

if(APPLE AND EXISTS "${THIRDPARTY_INSTALL_DIR}/jemalloc/include/jemalloc_prefix_compat.h")
    list(APPEND _opt_flags
        -DCMAKE_CXX_FLAGS=-I${THIRDPARTY_INSTALL_DIR}/jemalloc/include\ -include\ ${THIRDPARTY_INSTALL_DIR}/jemalloc/include/jemalloc_prefix_compat.h
    )
endif()

list(APPEND _opt_flags
    -DCMAKE_INSTALL_PREFIX=${FIZZ_INSTALL_DIR}
    -DCMAKE_MODULE_PATH=${_fizz_cmake_modules}

    -DCMAKE_POLICY_DEFAULT_CMP0167=OLD

    # Boost
    -DBOOST_ROOT=${THIRDPARTY_INSTALL_DIR}/boost
    -DBOOST_INCLUDEDIR=${THIRDPARTY_INSTALL_DIR}/boost/include
    -DBOOST_LIBRARYDIR=${THIRDPARTY_INSTALL_DIR}/boost/lib
    -DFOLLY_BOOST_LINK_STATIC=ON
    -DBOOST_LINK_STATIC=ON
    -DBoost_USE_STATIC_LIBS=ON
    -DBoost_USE_MULTITHREADED=ON
    -DBoost_USE_STATIC_RUNTIME=ON
    -DBoost_NO_SYSTEM_PATHS=ON

    # ZLIB
    -DZLIB_ROOT=${THIRDPARTY_INSTALL_DIR}/zlib
    -DZLIB_INCLUDE_DIR=${THIRDPARTY_INSTALL_DIR}/zlib/include
    -DZLIB_LIBRARY=${THIRDPARTY_INSTALL_DIR}/zlib/lib/libz.a

    # Glog
    -DGlog_DIR=${THIRDPARTY_INSTALL_DIR}/glog/lib/cmake/glog
    
    # --- Fizz Specifics ---
    -DBUILD_TESTS=OFF
    -DBUILD_EXAMPLES=OFF
)

thirdparty_cmake_configure("${FIZZ_SOURCE_DIR}" "${FIZZ_BUILD_DIR}"
    FORCE_CONFIGURE
    VALIDATION_FILES
        "${FIZZ_BUILD_DIR}/CMakeCache.txt"
        "${FIZZ_BUILD_DIR}/build.ninja"
    CMAKE_ARGS
        ${_opt_flags}
)

thirdparty_cmake_install("${FIZZ_BUILD_DIR}" "${FIZZ_INSTALL_DIR}"
    VALIDATION_FILES
        "${FIZZ_INSTALL_DIR}/lib/libfizz.a"
        "${FIZZ_INSTALL_DIR}/include/fizz/fizz-config.h"
)

# Export Fizz configuration for parent scope
thirdparty_safe_set_parent_scope(FIZZ_INSTALL_DIR "${FIZZ_INSTALL_DIR}")
set(fizz_DIR "${FIZZ_INSTALL_DIR}/lib/cmake/fizz" CACHE PATH "Path to installed Fizz cmake config" FORCE)

# Import Fizz package immediately
if(EXISTS "${FIZZ_INSTALL_DIR}/lib/cmake/fizz/fizz-config.cmake")
    file(READ "${FIZZ_INSTALL_DIR}/lib/cmake/fizz/fizz-config.cmake" config_content)
    string(REGEX REPLACE "find_dependency\\(Sodium\\)" "# \\0 - handled by parent" config_content "${config_content}")
    string(REGEX REPLACE "find_dependency\\(ZLIB\\)" "# \\0 - handled by parent" config_content "${config_content}")
    file(WRITE "${FIZZ_INSTALL_DIR}/lib/cmake/fizz/fizz-config.cmake" "${config_content}")
    
    set(folly_DIR "${THIRDPARTY_INSTALL_DIR}/folly/lib/cmake/folly" CACHE PATH "Path to folly cmake config" FORCE)
    find_package(fizz REQUIRED CONFIG QUIET)
    message(STATUS "Fizz found and imported: ${FIZZ_INSTALL_DIR}")
else()
    message(WARNING "Fizz cmake config not found at ${FIZZ_INSTALL_DIR}")
endif()
