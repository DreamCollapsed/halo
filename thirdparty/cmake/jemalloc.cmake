# jemalloc third-party integration
# Reference: https://github.com/jemalloc/jemalloc
# Dependencies: None
#
# This configuration provides two jemalloc targets:
# 1. jemalloc::jemalloc     - Standard static library (libjemalloc.a)
# 2. jemalloc::jemalloc_pic - Position Independent Code static library (libjemalloc_pic.a)
# 3. jemalloc::jemalloc_default - Alias to PIC version (recommended)
#
# Use jemalloc::jemalloc_pic when:
# - Building with CMAKE_POSITION_INDEPENDENT_CODE=ON (current project setting)
# - Linking static libraries that might be used in shared libraries
# - Following modern CMake best practices
#
# Use jemalloc::jemalloc when:
# - Specifically need the non-PIC version for performance reasons
# - Linking only to executables (not shared libraries)

thirdparty_setup_directories("jemalloc")

set(JEMALLOC_DOWNLOAD_FILE "${THIRDPARTY_DOWNLOAD_DIR}/jemalloc-${JEMALLOC_VERSION}.tar.bz2")
get_filename_component(JEMALLOC_INSTALL_DIR "${JEMALLOC_INSTALL_DIR}" ABSOLUTE)

thirdparty_build_autotools_library(jemalloc
    CONFIGURE_ARGS
        --disable-shared
        --enable-static
        # Use standard je_ prefix but don't export malloc/free to avoid conflicts
        --without-export
        --disable-libdl
    VALIDATION_FILES
        "${JEMALLOC_INSTALL_DIR}/lib/libjemalloc.a"
        "${JEMALLOC_INSTALL_DIR}/lib/libjemalloc_pic.a"
        "${JEMALLOC_INSTALL_DIR}/include/jemalloc/jemalloc.h"
)

if(NOT EXISTS "${JEMALLOC_INSTALL_DIR}/lib/libjemalloc.a")
    message(FATAL_ERROR "jemalloc installation validation failed: static library not found")
endif()

if(NOT EXISTS "${JEMALLOC_INSTALL_DIR}/lib/libjemalloc_pic.a")
    message(FATAL_ERROR "jemalloc installation validation failed: PIC static library not found")
endif()

if(NOT EXISTS "${JEMALLOC_INSTALL_DIR}/include/jemalloc/jemalloc.h")
    message(FATAL_ERROR "jemalloc installation validation failed: header not found")
endif()

add_library(jemalloc::jemalloc STATIC IMPORTED GLOBAL)
set_target_properties(jemalloc::jemalloc PROPERTIES
    IMPORTED_LOCATION "${JEMALLOC_INSTALL_DIR}/lib/libjemalloc.a"
    INTERFACE_INCLUDE_DIRECTORIES "${JEMALLOC_INSTALL_DIR}/include"
    # Enable drop-in replacement: force load jemalloc to override system malloc
    INTERFACE_LINK_OPTIONS "$<$<PLATFORM_ID:Darwin>:-Wl,-force_load,${JEMALLOC_INSTALL_DIR}/lib/libjemalloc.a>$<$<PLATFORM_ID:Linux>:-Wl,--whole-archive,${JEMALLOC_INSTALL_DIR}/lib/libjemalloc.a,-Wl,--no-whole-archive>"
    # Add compile definitions to indicate jemalloc is available
    INTERFACE_COMPILE_DEFINITIONS "USE_JEMALLOC=1;FOLLY_USE_JEMALLOC=1"
)

# Create imported target for jemalloc (PIC version) - recommended for modern CMake
add_library(jemalloc::jemalloc_pic STATIC IMPORTED GLOBAL)
set_target_properties(jemalloc::jemalloc_pic PROPERTIES
    IMPORTED_LOCATION "${JEMALLOC_INSTALL_DIR}/lib/libjemalloc_pic.a"
    INTERFACE_INCLUDE_DIRECTORIES "${JEMALLOC_INSTALL_DIR}/include"
    # PIC version is better suited for modern CMake with POSITION_INDEPENDENT_CODE=ON
    INTERFACE_POSITION_INDEPENDENT_CODE ON
    # Enable drop-in replacement: force load jemalloc to override system malloc
    INTERFACE_LINK_OPTIONS "$<$<PLATFORM_ID:Darwin>:-Wl,-force_load,${JEMALLOC_INSTALL_DIR}/lib/libjemalloc_pic.a>$<$<PLATFORM_ID:Linux>:-Wl,--whole-archive,${JEMALLOC_INSTALL_DIR}/lib/libjemalloc_pic.a,-Wl,--no-whole-archive>"
    # Add compile definitions to indicate jemalloc is available
    INTERFACE_COMPILE_DEFINITIONS "USE_JEMALLOC=1;FOLLY_USE_JEMALLOC=1"
)

add_library(jemalloc::jemalloc_default ALIAS jemalloc::jemalloc_pic)

file(WRITE "${JEMALLOC_INSTALL_DIR}/include/jemalloc_prefix_compat.h" "
/*
 * jemalloc compatibility header
 * Auto-generated by halo/thirdparty/cmake/jemalloc.cmake
 *
 * On macOS, folly expects jemalloc functions without 'je_' prefix,
 * but jemalloc provides them with 'je_' prefix. This header maps
 * the expected names to the actual je_ prefixed functions.
 */
#ifndef JEMALLOC_FOLLY_COMPAT_H
#define JEMALLOC_FOLLY_COMPAT_H

#include \"jemalloc/jemalloc.h\"

#ifdef __APPLE__
// Map folly-expected function names to jemalloc je_ prefixed functions
#define mallocx je_mallocx
#define rallocx je_rallocx
#define xallocx je_xallocx
#define sallocx je_sallocx
#define dallocx je_dallocx
#define sdallocx je_sdallocx
#define nallocx je_nallocx
#define mallctl je_mallctl
#define mallctlnametomib je_mallctlnametomib
#define mallctlbymib je_mallctlbymib
#define malloc_stats_print je_malloc_stats_print
#endif

#endif /* JEMALLOC_FOLLY_COMPAT_H */
")

if(APPLE)
    set_property(TARGET jemalloc::jemalloc APPEND PROPERTY
        INTERFACE_COMPILE_OPTIONS "-include;${JEMALLOC_INSTALL_DIR}/include/jemalloc_prefix_compat.h"
    )
    set_property(TARGET jemalloc::jemalloc_pic APPEND PROPERTY
        INTERFACE_COMPILE_OPTIONS "-include;${JEMALLOC_INSTALL_DIR}/include/jemalloc_prefix_compat.h"
    )
endif()

set(jemalloc_DIR "${JEMALLOC_INSTALL_DIR}" CACHE PATH "Path to installed jemalloc" FORCE)

message(DEBUG "jemalloc integration completed successfully")
